<!DOCTYPE html>
<html>
<head>
    <title>Scrum Team Metrics</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Tue Aug 04 2015 17:33:56 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Tue Aug 04 2015 17:33:56 GMT-0600 (MDT)";
        var CHECKSUM = 56737680718;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.Color',{
    singleton: true,

    featureCompleteColor: '#8bbc21',
    featureCompleteIncompleteDodColor: '#a6c96a',
    featurePushedColor: '#f28f43',
    featureTotalColor: '#2f7ed8',

    featurePlanned: '#90ed7d',
    featureAdded:'#8085e9',
    featureDescoped: '#492970',

    classificationOnTrack: 'green',
    classificationHighRisk: 'red',
    classificationModerateRisk: 'yellow',
    classificationOther: '#f6f6f6',

    storiesAcceptedCount:  '#145499',
    storiesTotalCount: '#f6f6f6',


    colors: ['#2f7ed8', '#8bbc21', '#910000', '#492970', '#f15c80', '#7cb5ec',
        '#f28f43', '#90ed7d', '#434348', '#8085e9', '#aa1925',
        '#145499','#77a1e5', '#c42525', '#f7a35c', '#a6c96a',
        '#e4d354', '#2b908f', '#f45b5b', '#91e8e1','#1aadce',
        '#4572A7', '#AA4643', '#89A54E', '#80699B', '#3D96AE',
        '#DB843D', '#92A8CD', '#A47D7C', '#B5CA92'],

    colorDisplay: [
        '<span style="color:#2f7ed8">',
        '<span style="color:#8bbc21">',
        '<span style="color:#910000">',
        '<span style="color:#492970">',
        '<span style="color:#f15c80">',
        '<span style="color:#f28f43">',
        '<span style="color:#90ed7d">',
        '<span style="color:#434348">',
        '<span style="color:#8085e9">',
        '<span style="color:#aa1925">',
        '<span style="color:#145499">',
        '<span style="color:#77a1e5">',
        '<span style="color:#c42525">',
        '<span style="color:#f7a35c">',
        '<span style="color:#a6c96a">',
        '<span style="color:#e4d354">',
        '<span style="color:#f45b5b">',
        '<span style="color:#91e8e1">',
        '<span style="color:#1aadce">',
        '<span style="color:#4572A7">',
        '<span style="color:#AA4643">',
        '<span style="color:#89A54E">',
        '<span style="color:#80699B">',
        '<span style="color:#3D96AE">',
        '<span style="color:#DB843D">',
        '<span style="color:#92A8CD">',
        '<span style="color:#A47D7C">',
        '<span style="color:#B5CA92">'
    ]


});

Ext.define('Rally.technicalservices.calculator.FeatureBurnup',{
    extend: 'Rally.data.lookback.calculator.TimeSeriesCalculator',
    config: {
        releaseOids: undefined,
        completedState: undefined
    },
    constructor: function(config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },
    getMetrics: function () {
        var completedState = this.completedState;

        return [
            {
                "field": "ReleaseFeature",
                "as": "Total Features",
                "display": "line",
                "f": "sum"
            },
            {
                "field": "ReleaseFeature",
                "as": "Delivered Features",
                "f": "filteredSum",
                "filterField": "State",
                "filterValues": [completedState],
                "display": "area"
            }];
    },
    getDerivedFieldsOnInput: function(){
        var releases = this.releaseOids;

        return [{
            "as": "ReleaseFeature",
            "f": function(snapshot){
                if (snapshot.Release && Ext.Array.contains(releases, snapshot.Release)) {
                    return 1;
                }
                return 0;
            }
        }];
    }
});

Ext.define('Rally.technicalservices.chart.FeatureBurnup', {
    extend: 'Rally.ui.chart.Chart',
    alias: 'widget.tsfeatureburnup',

    config: {

        /**
         * Input configurations
         */
        timeboxScope:  undefined,
        releases: undefined,
        context: undefined,
        featureModelName: undefined,

        loadMask: false,
        /**
         * Chart configurations
         */
       // loadMask: false,

        calculatorType: 'Rally.technicalservices.calculator.FeatureBurnup',
        calculatorConfig: undefined,
        storeType: 'Rally.data.lookback.SnapshotStore',


        storeConfig: {
            fetch: [
                'ObjectID',
                'c_FeatureTargetSprint',
                '_PreviousValues.c_FeatureTargetSprint',
                'Release',
                '_PreviousValues.Release',
                '_ValidFrom',
                'State'
            ],
            sort: {
                '_ValidFrom': 1
            },
            limit: Infinity,
            compress: true,
            removeUnauthorizedSnapshots: true,
            hydrate: ['State']
        },

        chartConfig: {
            colors: ['#2f7ed8','#8bbc21'],

            chart: {
                defaultSeriesType: 'area',
                zoomType: 'xy'
            },
            title: {
                text: '',
                useHTML: true
            },
            xAxis: {
                categories: [],
                tickmarkPlacement: 'on',
                tickInterval: 5,
                //title: {
                //    text: 'Date',
                //    margin: 10
                //},
                labels: {
                    rotation: -45,
                    formatter: function(){
                        console.log('this.value', this.value);
                        return Rally.util.DateTime.format(Rally.util.DateTime.fromIsoString(this.value), 'M-d');
                    }
                }
            },
            yAxis: [
                {
                    title: {
                        text: 'Feature Count'
                    }
                }
            ],
            legend: {
                align: 'left',
                x: 0,
                verticalAlign: 'top',
                y: 30,
                floating: true,
                backgroundColor: 'white',
                borderColor: '#CCC',
                borderWidth: 1,
                shadow: false
            },
            tooltip: {
                formatter: function() {
                    return '' + this.x + '<br />' + this.series.name + ': ' + this.y;
                }
            },
            plotOptions: {
                series: {
                    marker: {
                        enabled: false,
                        states: {
                            hover: {
                                enabled: true
                            }
                        }
                    },
                    groupPadding: 0.01
                },
                column: {
                    stacking: null,
                    shadow: false
                }
            }
        }

    },
    constructor: function(config) {
        this.mergeConfig(config);

        console.log('config',config);

        this.chartConfig.title.text = this._getTitle(config.title);

        var release_start_date = Rally.util.DateTime.toIsoString(config.timeboxScope.getRecord().get('ReleaseStartDate'), true),
            release_end_date = Rally.util.DateTime.toIsoString(config.timeboxScope.getRecord().get('ReleaseDate'), true);

        console.log('dates', release_start_date);
        var release_oids = _.map(config.releases, function(rel){return rel.get('ObjectID')});


        this.config.calculatorConfig = {
            releaseOids: release_oids,
            completedState: config.completedState,
            startDate: release_start_date,
            endDate: release_end_date,
            projectOid: config.context.getProject().ObjectID
        };

        var find = {
            _TypeHierarchy: config.featureModelName,
            _ProjectHierarchy: config.context.getProject().ObjectID,
            _ValidTo:  {$gte: release_start_date},
            _ValidFrom: {$lte: release_end_date}
        };
        this.storeConfig.find = find;
        this.callParent([this.config]);

    },
    _getTitle: function(){
        return Ext.String.format('<div style="text-align:center"><span style="font-size:20px;color:black;"><b>{0}</b></span></div>', this.title);
    },

    initComponent: function() {
        this.callParent(arguments);
    },
    //Overriding this function because we want to set colors ourselves.
    _setChartColorsOnSeries: function (series) {
        return null;
    }
});



Ext.define('Rally.technicalservices.chart.FeatureRisk', {
    extend: 'Rally.ui.chart.Chart',
    alias: 'widget.tsfeatureriskpie',

    config: {
        featureSummaryCalculator: undefined,
        displayColorClassificationMapping: {
            '#107c1e': 'On Track',
            '#df1a7b': 'High Risk',
            '#fce205': 'Moderate Risk',
            '#f9a814': 'High Risk',
            '#ee6c19': 'High Risk'
        },
        classificationChartColorMapping: {
            'On Track': Rally.technicalservices.Color.classificationOnTrack,
            'High Risk': Rally.technicalservices.Color.classificationHighRisk,
            'Moderate Risk': Rally.technicalservices.Color.classificationModerateRisk,
            'Other': Rally.technicalservices.Color.classificationOther
        },

        loadMask: false,

        chartConfig: {
            colors: [
                Rally.technicalservices.Color.classificationOnTrack,
                Rally.technicalservices.Color.classificationHighRisk,
                Rally.technicalservices.Color.classificationModerateRisk,
                Rally.technicalservices.Color.classificationOther
            ],

            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: 0,
                plotShadow: false,
                type: 'pie'
            },
            title: {
                text: '',
                align: 'center',
                useHTML: true
            },
            tooltip: {
                pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
            },
            plotOptions: {
                pie: {
                    dataLabels: {
                        enabled: true,
                        distance: -5,
                        style: {
                           // fontWeight: 'bold',
                            color: 'black',
                           // textShadow: '0px 1px 2px black',
                            fontSize: '10px'
                        },
                        format: '{point.name}: {point.y}'
                    },
                    center: ['50%', '50%'],
                    size: '60%'
                }
            }
        },
        chartData: {
            series: []
        }

    },
    constructor: function(config) {
        this.mergeConfig(config);
        this.chartConfig.title.text = this._getTitle();
        this.chartData.series = this._getSeries(config.featureSummaryCalculator.featureColorData);

        this.callParent([this.config]);
    },
    initComponent: function() {
        this.callParent(arguments);
        this.setWidth(300);
    },
    _getSeries: function(records){
        console.log('_getSeries', records);
        var color_data = {},
            data = [];

        _.each(records, function(r){
            var color = r.get('DisplayColor') || 'Other';
            console.log('color',color);
            var classification = this.displayColorClassificationMapping[color] || 'Other';
            color_data[classification] = color_data[classification] || 0;
            color_data[classification]++;
        }, this);

        _.each(this.classificationChartColorMapping, function(color, classification){
            data.push({
                name: classification,
                y: color_data[classification] || 0,
                color: this.classificationChartColorMapping[classification]
            });
        }, this);

        return [{
            name: 'Risk Color',
            data: data,
            size: '80%',
            dataLabels: {
                formatter: function(){
                    return this.point.name + ': ' + this.y + '%'
                }
            }
        }];
    },
    _getTitle: function(){
        return Ext.String.format('<div style="text-align:center"><span style="font-size:20px;color:black;"><b>{0}</b></span></div>', this.title);
    },
    //Overriding this function because we want to set colors ourselves.
    _setChartColorsOnSeries: function (series) {
        return null;
    }

});

Ext.define('Rally.technicalservices.calculator.FeatureSummary',{
    config: {
        completedState: "Done",
        plannedDate: undefined,
        timeboxScope: undefined,
        featureModelName: "PortfolioItem/Feature",
        releases: undefined
    },
    displayColorsOfRisk: undefined,
    notCalculated: -1,
    pushedField: 'c_FeatureTargetSprint',

    /**
     * Features on Track(for current project scope):
     * Features on track = All features for release that are not Done and not Yellow or Red in Color (note the color is set manually).
     *
     */
    onTrackFeatures: undefined,
    /**
     * Features associated with the current Release that are currently in the completedState
     */
    completedFeatures: undefined,
    totalFeatures: undefined,
    plannedFeatures: undefined,
    pushedFeatures: undefined,
    newFeaturesInRelease: undefined,
    descopedFeatures: undefined,
    doneFeaturesWithIncompleteDod: undefined,

    constructor: function (config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },
    _getStartFind: function(release_oids){
        var release_start_date = Rally.util.DateTime.toIsoString(this.timeboxScope.getRecord().get('ReleaseStartDate'));

        return {
            _TypeHierarchy: this.featureModelName,
            _ProjectHierarchy: this.context.getProject().ObjectID,
            __At: release_start_date,
            Release: {$in: release_oids}
        };
    },
    _getEndFind: function(release_oids){
        var release_end_date = Rally.util.DateTime.toIsoString(this.timeboxScope.getRecord().get('ReleaseDate'));
        if (release_end_date > new Date()){
            release_end_date = "current";
        }
        return {
            _TypeHierarchy: this.featureModelName,
            _ProjectHierarchy: this.context.getProject().ObjectID,
            __At: release_end_date,
            Release: {$in: release_oids}
        };
    },
    calculate: function(){
        var deferred = Ext.create('Deft.Deferred'),
            release_oids = _.map(this.releases, function(r){return r.get('ObjectID')}),
            fetch = ['ObjectID'];

        var promises = [
            Rally.technicalservices.LookbackToolbox.fetchLookbackRecords(this._getStartFind(release_oids), fetch),
            Rally.technicalservices.LookbackToolbox.fetchLookbackRecords(this._getEndFind(release_oids), fetch),
            this._fetchFeaturesComplete(),
            this._fetchFeatureColors(),
            this.getDoneItemsWithIncompleteDoD(),
            this._fetchFeaturesPushed(),
            this._fetchStoryAcceptedCounts()
        ];

        Deft.Promise.all(promises).then({
            scope: this,
            success: function(results){
                this.featuresOnDay0 = _.map(results[0], function(r){ return r.get('ObjectID')}),
                this.featuresCurrentOrOnLastDayOfRelease = _.map(results[1], function(r){return r.get('ObjectID')}),
                this.featuresDescoped = Ext.Array.difference(this.featuresOnDay0, this.featuresCurrentOrOnLastDayOfRelease),
                this.featuresAdded = Ext.Array.difference(this.featuresCurrentOrOnLastDayOfRelease, this.featuresOnDay0);
                this.completedFeatures = results[2] || this.notCalculated;
                this.featureColorData = results[3];

                this.doneFeaturesWithIncompleteDoD = this._getFeatureWithIncompleteDoDCount(results[4]);
                this.featuresPushedCount = this._getFeaturesPushedCount(results[5]);
                this.storiesAcceptedCounts = results[6];
                console.log('results',results)
                deferred.resolve();
            },
            failure: function(msg){
                console.log('failure', msg);
            }
        });
        return deferred;
    },
    _fetchFeatureColors: function(){
        var filters = this.timeboxScope.getQueryFilter(),
            fetch = ['ObjectID','DisplayColor','State'];

        filters = filters.and(Ext.create('Rally.data.wsapi.Filter',{
            property: 'State.Name',
            operator: '!=',
            value: this.completedState
        }));

        return Rally.technicalservices.WsapiToolbox.fetchWsapiRecords(this.featureModelName, filters, fetch);
    },
    _fetchFeaturesComplete: function(){
        var filters = this.timeboxScope.getQueryFilter();

        filters = filters.and(Ext.create('Rally.data.wsapi.Filter',{
            property: 'State.Name',
            operator: '=',
            value: this.completedState
        }));

        return Rally.technicalservices.WsapiToolbox.fetchWsapiCount(this.featureModelName, filters);
    },
    _fetchFeaturesPushed: function(){
        var release_oids = _.map(this.releases, function(rel){return rel.get('ObjectID')});
        var find = {
            _TypeHierarchy: this.featureModelName,
            _ProjectHierarchy: this.context.getProject().ObjectID,
            Release: {$in: release_oids},
            "_PreviousValues.c_FeatureTargetSprint": {$exists: true}
        };
        var fetch = ['c_FeatureTargetSprint','_PreviousValues.c_FeatureTargetSprint','ObjectID','_ValidFrom'];
        return Rally.technicalservices.LookbackToolbox.fetchLookbackRecords(find, fetch);
    },
    getDoneItemsWithIncompleteDoD: function(){
        var filters = this.timeboxScope.getQueryFilter();

        filters = filters.and(Ext.create('Rally.data.wsapi.Filter',{
            property: 'c_DoDStoryType',
            operator: '!=',
            value: ''
        }));

        filters = filters.and(Ext.create('Rally.data.wsapi.Filter',{
            property: 'ScheduleState',
            operator: '!=',
            value: "Accepted"
        }));

        filters = filters.and(Ext.create('Rally.data.wsapi.Filter',{
            property: 'Feature.State.Name',
            value: this.completedState
        }));
        //TODO - process the data to return the number of features
        return Rally.technicalservices.WsapiToolbox.fetchWsapiRecords('HierarchicalRequirement',filters,['Feature','ObjectID']);
    },
    _getFeatureWithIncompleteDoDCount: function(records){
        var features = [];
        _.each(records, function(r){
            if (r.get('Feature')){
                features = Ext.Array.merge(features, [r.get('Feature').ObjectID]);
            }
        });
        console.log('features', features);
        return features.length;
    },
    _getFeaturesPushedCount: function(records){
        var snaps_by_oid = Rally.technicalservices.LookbackToolbox.aggregateSnapsByOidForModel(records),
            pushed_features = [],
            sprints = {};

        _.each(snaps_by_oid, function(snaps, oid){
            _.each(snaps, function(snap){
                 var prev_sprint = snap["_PreviousValues.c_FeatureTargetSprint"] ||  null;
                if (prev_sprint){
                    pushed_features = Ext.Array.merge(pushed_features, [oid]);
                    if (sprints[prev_sprint] == undefined){
                        sprints[prev_sprint] = 0;
                    }
                    sprints[prev_sprint]++;
                }
            });
        });

        console.log('snaps', sprints, pushed_features);
        this.featurePushedSprintHash = sprints;
        return pushed_features.length;
    },
    _fetchStoryAcceptedCounts: function(){
        var deferred = Ext.create('Deft.Deferred');
        var filters = this.timeboxScope.getQueryFilter();

        Rally.technicalservices.WsapiToolbox.fetchWsapiRecords(this.featureModelName,filters,['ObjectID','LeafStoryCount','AcceptedLeafStoryCount']).then({
            scope: this,
            success: function(records){
                var total_count = 0,
                    accepted_count = 0;

                _.each(records, function(r){
                    total_count += r.get('LeafStoryCount') || 0;
                    accepted_count += r.get('AcceptedLeafStoryCount') || 0;
                });
                console.log('storie accpeted counts',{Accepted: accepted_count, Total: total_count} );
                deferred.resolve({Accepted: accepted_count, Total: total_count})
            }
        });

        return deferred;
    }
});


Ext.define('Rally.technicalservices.chart.FeatureSummary', {
    extend: 'Rally.ui.chart.Chart',
    alias: 'widget.tsfeaturesummary',

    config: {

        loadMask: false,

        chartConfig: {
            colors: [
                Rally.technicalservices.Color.featureTotalColor,
                Rally.technicalservices.Color.featurePlanned,
                Rally.technicalservices.Color.featureAdded,
                Rally.technicalservices.Color.featureDescoped,
                Rally.technicalservices.Color.featureCompleteColor
            ],

            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: 0,
                plotShadow: false,
                type: 'bar'
            },
            title: {
                text: '',
                align: 'center',
                useHTML: true
            },
            tooltip: {
                pointFormat: '<b>{point.y}</b>'
            },
            xAxis: {
                type: 'category',
                labels: {
                    enabled: true
                }
            },
            yAxis: {
                title: {
                    text: 'Feature Count'
                }
            },
            legend: {
                enabled: false
            },
            plotOptions: {
                column: {
                    stacking: 'normal',
                    colorByPoint: true
                },
                series: {
                    borderWidth: 0,
                    dataLabels: {
                        enabled: false,
                        format: '{point.y}'
                    }
                }
            }
        },
        chartData: {
            series: []
        }

    },
    constructor: function(config) {
        this.mergeConfig(config);

        this.chartData.series = this._getSeries(config.featureSummaryCalculator);
        this.chartConfig.title.text = this._getTitle();
        this.callParent([this.config]);

    },
    initComponent: function() {
        this.callParent(arguments);
        this.setWidth(300);
    },
    _getTitle: function(){
        return Ext.String.format('<div style="text-align:center"><span style="font-size:20px;color:black;"><b>{0}</b></span></div>', this.title);
    },

    _getSeries: function(calculator){
        console.log('_getSeries', calculator);

        var series =  [{
            name: 'Snapshot',
            data: [
            ['Total', calculator.featuresCurrentOrOnLastDayOfRelease.length],
            ['Planned',calculator.featuresOnDay0.length],
            ['Added',calculator.featuresAdded.length],
            ['Descoped',calculator.featuresDescoped.length],
            ['Delivered',calculator.completedFeatures]
        ]
            }];
        return series;
    },
    _setChartColorsOnSeries: function () {
        return null;
    }
});


Ext.define('Rally.technicalservices.chart.FeaturesDelivered', {
    extend: 'Rally.ui.chart.Chart',
    alias: 'widget.tsfeaturesdelivered',

    config: {
        featureSummaryCalculator: undefined,

        loadMask: false,

        chartConfig: {
            colors: [
                Rally.technicalservices.Color.featureCompleteColor,
                Rally.technicalservices.Color.featureCompleteIncompleteDodColor,
                Rally.technicalservices.Color.featureTotalColor
            ],

            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: 0,
                plotShadow: false,
                type: 'pie'
            },
            title: {
                text: '',
                align: 'center',
                verticalAlign: 'middle',
                y: -20,
                useHTML: true
            },
            tooltip: {
                pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
            },
            plotOptions: {
                pie: {
                    dataLabels: {
                        enabled: false
                    },
                    center: ['50%', '50%'],
                    size: '75%'
                }
            }
        },
        chartData: {
            series: []
        }

    },
    constructor: function(config) {
        this.mergeConfig(config);
        this.chartConfig.title.text = this._getTitle();
        this.chartData.series = this._getSeries(config.featureSummaryCalculator);

        this.callParent([this.config]);
    },
    initComponent: function() {
        this.callParent(arguments);
        this.setWidth(300);
    },
    _getSeries: function(calculator){
        console.log('_getSeries', calculator);

        var data = [{
            name: 'Delivered',
            y: calculator.completedFeatures - calculator.doneFeaturesWithIncompleteDoD,
            color: Rally.technicalservices.Color.featureCompleteColor
        },{
            name: 'Delivered (Incompleted DoD)',
            y: calculator.doneFeaturesWithIncompleteDoD,
            color: Rally.technicalservices.Color.featureCompleteIncompleteDodColor
        },{
            name: 'Not Delivered',
            y: calculator.featuresCurrentOrOnLastDayOfRelease.length - (calculator.completedFeatures),
            color: Rally.technicalservices.Color.featureTotalColor
        }];


        return [{
            name: 'Delivered',
            data: data,
            innerSize: '60%'
        }];
    },
    _getTitle: function(){
        var pct_features_delivered = Number(this.featureSummaryCalculator.completedFeatures/this.featureSummaryCalculator.featuresCurrentOrOnLastDayOfRelease.length * 100).toFixed(1),
            pct_incompleted_dod = Number(this.featureSummaryCalculator.doneFeaturesWithIncompleteDoD/this.featureSummaryCalculator.featuresCurrentOrOnLastDayOfRelease.length * 100).toFixed(1);

        return Ext.String.format('<div style="text-align:center"><span style="font-size:24px;color:black"><b>{0}%</b></span>' +
            '<br/><span style="font-size:12px;color:silver">Delivered</span><br/>' +
            '<span style="font-size:18px;color:black"><b>{1}%</b></span>' +
            '<br/><span style="font-size:12px;color:silver">Incomplete DoD</span></div>',
            pct_features_delivered, pct_incompleted_dod);
    },
    //Overriding this function because we want to set colors ourselves.
    _setChartColorsOnSeries: function (series) {
        return null;
    }

});


Ext.define('Rally.technicalservices.chart.FeaturesPushed', {
    extend: 'Rally.ui.chart.Chart',
    alias: 'widget.tsfeaturespushed',

    config: {

        loadMask: false,

        chartConfig: {
            colors: [Rally.technicalservices.Color.featurePushedColor],

            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: 0,
                plotShadow: false,
                type: 'column'
            },
            title: {
                text: '',
                align: 'center',
                useHTML: true
            },
            tooltip: {
                pointFormat: '<b>{point.y}</b>'
            },
            xAxis: {
                type: 'category',
                labels: {
                    enabled: true
                }
            },
            yAxis: {
                title: {
                    text: 'Feature Count'
                }
            },
            legend: {
                enabled: false
            },
            plotOptions: {
                column: {
                    stacking: 'normal'
                },
                series: {
                    borderWidth: 0,
                    dataLabels: {
                        enabled: true,
                        format: '{point.name}'
                    }
                }
            }
        },
        chartData: {
            series: []
        }

    },
    constructor: function(config) {
        this.mergeConfig(config);

        this.chartData.series = this._getSeries(config.featureSummaryCalculator);
        this.chartConfig.title.text = this._getTitle();
        this.chartData.categories = this._getCategories(config.featureSummaryCalculator);
        this.callParent([this.config]);

    },
    initComponent: function() {
        this.callParent(arguments);
    },
    _getTitle: function(){
        return Ext.String.format('<div style="text-align:center"><span style="font-size:20px;color:black;"><b>{0}</b></span></div>', this.title);
    },

    _getSeries: function(calculator){
        console.log('_getSeries', calculator);
        var sprint_hash = calculator.featurePushedSprintHash,
            data = [];

        _.each(calculator.featurePushedSprintHash, function(count, sprint){
            data.push(count);
        });


        var series =  [{
            name: 'Pushed Features',
            data: data
        }];
        return series;
    },
    _getCategories: function(calculator){
        return _.keys(calculator.featurePushedSprintHash);
    },
    //Overriding this function because we want to set colors ourselves.
    _setChartColorsOnSeries: function (series) {
        return null;
    }
});


Ext.define('Rally.technicalservices.LookbackToolbox',{
    singleton: true,

    fetchLookbackSnapshotCount: function(find){
        var deferred = Ext.create('Deft.Deferred');

        Ext.create('Rally.data.lookback.SnapshotStore',{
            fetch: ['ObjectID'],
            find: find,
            limit: 1,
            pageSize: 1,
            removeUnauthorizedSnapshots: true
        }).load({
            callback: function(records, operation, success){
                console.log('getCount callback',success, records ,operation);
                if (success){
                    deferred.resolve(operation.resultSet.totalRecords);
                } else {
                    deferred.reject(Ext.String.format("Error running lookback query: {0}",  operation.error.errors.join(',')));
                }
            }
        });

        return deferred;
    },
    fetchLookbackRecords: function(find, fetch, hydrate, sort){
        var deferred = Ext.create('Deft.Deferred');

        fetch = fetch || ['ObjectID'];
        hydrate = hydrate || [];
        sort = sort || {_ValidFrom: 1};

        Ext.create('Rally.data.lookback.SnapshotStore',{
            fetch: fetch,
            find: find,
            hydrate: hydrate,
            limit: Infinity,
            sort: sort,
            removeUnauthorizedSnapshots: true
        }).load({
            callback: function(records, operation, success){
                console.log('fetchLookbackRecords callback',success, records ,operation);
                if (success){
                    deferred.resolve(records);
                } else {
                    deferred.reject(Ext.String.format("Error running lookback query: {0}",  operation.error.errors.join(',')));
                }
            }
        });
        return deferred;
    },
    fetchLookbackFieldTransitions: function(find, field, iso_start_date){

        var previous_values_field = "_PreviousValues." + field;

        find["_ValidFrom"] = {$gte: iso_start_date};
        find[previous_values_field] = {$exists: true};
        find[previous_values_field] = {$ne: null};

        var fetch = ['ObjectID', field, previous_values_field, "_ValidFrom","_SnapshotNumber"];

        return Rally.technicalservices.LookbackToolbox.fetchLookbackRecords(find,fetch);
    },
    fetchLookbackFieldTransitionsCount: function(find, field, iso_start_date){
        var deferred = Ext.create('Deft.Deferred');
        Rally.technicalservices.LookbackToolbox.fetchLookbackFieldTransitions(find, field, iso_start_date).then({
            success: function(snaps){
                var snaps_by_oid = Rally.technicalservices.LookbackToolbox.aggregateSnapsByOidForModel(snaps);
                deferred.resolve(_.keys(snaps_by_oid).length);
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    fetchLookbackFieldTransitionIntoCount: function(find, field, iso_start_date, into_value){
        var deferred = Ext.create('Deft.Deferred');

        var previous_values_field = "_PreviousValues." + field;

        find["_ValidFrom"] = {$gte: iso_start_date};
        find[previous_values_field] = {$exists: true};
        if (into_value instanceof Array){
            find[field] = {$in: into_value};
        } else {
            find[field] = into_value;

        }
        var fetch = ['ObjectID', field, previous_values_field, "_ValidFrom","_SnapshotNumber"];

        Rally.technicalservices.LookbackToolbox.fetchLookbackFieldTransitions(find, field, iso_start_date).then({
            success: function(snaps){
                var snaps_by_oid = Rally.technicalservices.LookbackToolbox.aggregateSnapsByOidForModel(snaps);

                //TODO if into_value is an array,  verify that the previous values is not in that array.

                deferred.resolve(_.keys(snaps_by_oid).length);
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    fetchLookbackFieldTransitionOutOfCount: function(find, field, iso_start_date, out_of_value){
        var deferred = Ext.create('Deft.Deferred');

        var previous_values_field = "_PreviousValues." + field;

        find["_ValidFrom"] = {$gte: iso_start_date};
        if (out_of_value instanceof Array){
            find[previous_values_field] = {$in: out_of_value};
        } else {
            find[previous_values_field] = out_of_value;
        }


        var fetch = ['ObjectID', field, previous_values_field, "_ValidFrom","_SnapshotNumber"];

        Rally.technicalservices.LookbackToolbox.fetchLookbackFieldTransitions(find, field, iso_start_date).then({
            success: function(snaps){
                var snaps_by_oid = Rally.technicalservices.LookbackToolbox.aggregateSnapsByOidForModel(snaps);
                deferred.resolve(_.keys(snaps_by_oid).length);
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    aggregateSnapsByOidForModel: function(snaps){
        //Return a hash of objects (key=ObjectID) with all snapshots for the object
        var snaps_by_oid = {};
        Ext.each(snaps, function(snap){
            var oid = snap.ObjectID || snap.get('ObjectID');
            if (snaps_by_oid[oid] == undefined){
                snaps_by_oid[oid] = [];
            }
            snaps_by_oid[oid].push(snap.getData());

        });
        return snaps_by_oid;
    },
    aggregateSnapsByOid: function(snaps){
        //Return a hash of objects (key=ObjectID) with all snapshots for the object
        var snaps_by_oid = {};
        Ext.each(snaps, function(snap){
            var oid = snap.ObjectID;
            if (snaps_by_oid[oid] == undefined){
                snaps_by_oid[oid] = [];
            }
            snaps_by_oid[oid].push(snap);
        });
        return snaps_by_oid;
    }
});


Ext.define('Rally.technicalservices.chart.StoriesAccepted', {
    extend: 'Rally.ui.chart.Chart',
    alias: 'widget.tsstoriesaccepted',

    config: {
        featureSummaryCalculator: undefined,

        loadMask: false,

        chartConfig: {
            colors: [
                Rally.technicalservices.Color.storiesAcceptedCount,
                Rally.technicalservices.Color.storiesTotalCount
            ],

            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: 0,
                plotShadow: false,
                type: 'pie'
            },
            title: {
                text: '',
                align: 'center',
                verticalAlign: 'middle',
                y: -20,
                useHTML: true
            },
            tooltip: {
                pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
            },
            plotOptions: {
                pie: {
                    dataLabels: {
                        enabled: false
                    },
                    center: ['50%', '50%'],
                    size: '75%'
                }
            }
        },
        chartData: {
            series: []
        }

    },
    constructor: function(config) {
        this.mergeConfig(config);
        this.chartConfig.title.text = this._getTitle(config.featureSummaryCalculator);
        this.chartData.series = this._getSeries(config.featureSummaryCalculator);

        this.callParent([this.config]);
    },
    initComponent: function() {
        this.callParent(arguments);
        this.setWidth(300);
    },
    _getSeries: function(calculator){
        console.log('_getSeries', calculator);

        var data = [{
            name: 'Accepted',
            y: calculator.storiesAcceptedCounts.Accepted,
            color: Rally.technicalservices.Color.storiesAcceptedCount
        },{
            name: 'Not Accepted',
            y: calculator.storiesAcceptedCounts.Total - calculator.storiesAcceptedCounts.Accepted,
            color: Rally.technicalservices.Color.storiesTotalCount
        }];


        return [{
            name: 'Accepted Stories',
            data: data,
            innerSize: '60%'
        }];
    },
    _getTitle: function(calculator){
        console.log('gettitle',calculator);
        var pct_accepted = Number(calculator.storiesAcceptedCounts.Accepted/calculator.storiesAcceptedCounts.Total * 100).toFixed(1);

        return Ext.String.format('<div style="text-align:center"><span style="font-size:24px;color:black"><b>{0}%</b></span>' +
            '<br/><span style="font-size:12px;color:silver">Stories Accepted</span></div>',
            pct_accepted);
    },
    //Overriding this function because we want to set colors ourselves.
    _setChartColorsOnSeries: function (series) {
        return null;
    }

});

Ext.define('Rally.technicalservices.WsapiToolbox',{
    singleton: true,
    fetchWsapiCount: function(model, query_filters){
        var deferred = Ext.create('Deft.Deferred');

        var store = Ext.create('Rally.data.wsapi.Store',{
            model: model,
            fetch: ['ObjectID'],
            filters: query_filters,
            limit: 1,
            pageSize: 1
        }).load({
            callback: function(records, operation, success){
                console.log('getCount callback',query_filters.toString(),operation);
                if (success){
                    deferred.resolve(operation.resultSet.totalRecords);
                } else {
                    deferred.reject(Ext.String.format("Error getting {0} count for {1}: {2}", model, query_filters.toString(), operation.error.errors.join(',')));
                }
            }
        });
        return deferred;
    },
    fetchWsapiRecords: function(model, query_filters, fetch_fields){
        var deferred = Ext.create('Deft.Deferred');

        var store = Ext.create('Rally.data.wsapi.Store',{
            model: model,
            fetch: fetch_fields,
            filters: query_filters,
            limit: Infinity
        }).load({
            callback: function(records, operation, success){
                console.log('getCount callback',query_filters.toString(),operation);
                if (success){
                    deferred.resolve(records);
                } else {
                    deferred.reject(Ext.String.format("Error getting {0} for {1}: {2}", model, query_filters.toString(), operation.error.errors.join(',')));
                }
            }
        });
        return deferred;
    }
});

Ext.define("scrum-team-metrics", {
    extend: 'Rally.app.TimeboxScopedApp',
    scopeType: 'release',
    supportsUnscheduled: false,

    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },

    featureModelName: 'PortfolioItem/Feature',
    featureFields: ['ObjectID','FormattedID','Name','Release','State','DisplayColor'],
    dodStoryFields: ['ObjectID','FormattedID','Name','Feature','c_DoDStoryType'],
    completedState: "Done",

    initComponent: function() {
        this.callParent([]);
    },
    launch: function(){
        this.callParent();
    },
    onScopeChange: function(timeboxScope){
        this.setLoading(true);
        this._fetchReleases(timeboxScope).then({
            scope: this,
            success: function(releases){
                this.releases = releases;

                var calculator = Ext.create('Rally.technicalservices.calculator.FeatureSummary',{
                    timeboxScope: this.getContext().getTimeboxScope(),
                    context: this.getContext(),
                    releases: releases,
                    plannedDate: timeboxScope.getRecord().get('ReleaseStartDate'),
                    featureModelName: this.featureModelName,
                    completedState: this.completedState
                });
                calculator.calculate().then({
                    scope: this,
                    success: function(){
                        this.setLoading(false);
                        this._displayMetrics(calculator);
                    }
                });
            },
            failure: function(msg){
                Rally.ui.notify.Notifier.showError({message: msg});
            }
        });

    },
    _fetchReleases: function(timebox){
        this.logger.log('_fetchReleases Loading');

        var deferred = Ext.create('Deft.Deferred'),
            rec = timebox.getRecord(),
            me = this;

        if (rec == null) {
            deferred.resolve([]);
        }

        Ext.create('Rally.data.wsapi.Store',{
            model: 'Release',
            fetch: ['ObjectID'],
            filters: [{
                property: 'Name',
                value: rec.get('Name')
            },{
                property: 'ReleaseStartDate',
                value: rec.get('ReleaseStartDate')
            },{
                property: 'ReleaseDate',
                value: rec.get('ReleaseDate')
            }],
            limit: Infinity
        }).load({
            callback: function(records, operation, success){
                me.logger.log('_fetchReleases',success,records.length,operation);
                if (success){
                    deferred.resolve(records);
                }   else {
                    deferred.reject("Error loading Releases: " + operation.error.errors.join(','));
                }
            }
        });
        return deferred;
    },
    _displayMetrics: function(calculator){
        var ct = this.down('#display_box');
        if (ct){
            ct.destroy();
        } else {
            ct = this.add({
                xtype: 'container',
                itemId: 'display_box',
                width: '100%',
                layout:'vbox',
                items: [{
                    xtype: 'container',
                    itemId: 'ct-first-row',
                    layout: {type: 'hbox'},
                    bodyPadding: 20,
                    flex: 1,
                    border: false
                },{
                    xtype: 'container',
                    itemId: 'ct-second-row',
                    layout: {type: 'hbox'},
                    bodyPadding: 20,
                    flex: 1,
                    border: false
                }]
            });
        }

        this.logger.log('_displayMetrics')
        var top_row_ct = this.down('#ct-first-row'),
            top_chart_width = this.getWidth();

        this.logger.log('width', top_chart_width);
        var summary = top_row_ct.add({
            xtype: 'tsfeaturesummary',
            featureSummaryCalculator: calculator,
            title: "Feature Summary"
        });
        summary.setWidth(top_chart_width *.25);
        summary.setHeight(250);
        var delivered = top_row_ct.add({
            xtype: 'tsfeaturesdelivered',
            featureSummaryCalculator: calculator,
            title: 'Delivered'
        });
        delivered.setWidth(top_chart_width *.20);
        delivered.setHeight(250);


        var accepted = top_row_ct.add({
            xtype: 'tsstoriesaccepted',
            featureSummaryCalculator: calculator,
            title: 'Accepted'
        });
        accepted.setWidth(top_chart_width *.20);
        accepted.setHeight(250);


        var risk = top_row_ct.add({
            xtype: 'tsfeatureriskpie',
            itemId: 'feature-status',
            title: 'Feature Risk',
            featureSummaryCalculator: calculator,
            featureModelName: this.featureModelName,
            timeboxScope: this.getContext().getTimeboxScope()
        });
        risk.setWidth(top_chart_width *.25);
        risk.setHeight(250);

        var second_row_ct = this.down('#ct-second-row');
        var burnup_chart = second_row_ct.add({
            xtype: 'tsfeatureburnup',
            timeboxScope: this.getContext().getTimeboxScope(),
            context: this.getContext(),
            completedState: this.completedState,
            releases: this.releases,
            featureModelName: this.featureModelName,
            title: "Feature Burnup"
        });
        burnup_chart.setWidth(top_chart_width * .45);
        burnup_chart.setHeight(250);

        var pushed_chart = second_row_ct.add({
            xtype: 'tsfeaturespushed',
            featureSummaryCalculator: calculator,
            title: "Features pushed from Feature Target Sprints"
        });
        pushed_chart.setWidth(top_chart_width * .45);
        pushed_chart.setHeight(250);

    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },

    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('scrum-team-metrics', {
                   name: 'Scrum Team Metrics'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

.x-progress-bar-default {
    background-color: #8bbc21!important;
    background-image: none!important;
    border-width:0px!important;
    vertical-align: middle!important;

}
    </style>

</head>
<body></body>
</html>